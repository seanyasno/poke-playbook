/* tslint:disable */
/* eslint-disable */
/**
 * Poke Playbook API
 * Pokemon Team Builder API with Authentication
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setBearerAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface AuthResponseDto
 */
export interface AuthResponseDto {
  /**
   *
   * @type {AuthResponseDtoUser}
   * @memberof AuthResponseDto
   */
  user: AuthResponseDtoUser;
  /**
   *
   * @type {string}
   * @memberof AuthResponseDto
   */
  message?: string;
}
/**
 *
 * @export
 * @interface AuthResponseDtoUser
 */
export interface AuthResponseDtoUser {
  /**
   *
   * @type {AuthResponseDtoUserUser}
   * @memberof AuthResponseDtoUser
   */
  user: AuthResponseDtoUserUser | null;
}
/**
 *
 * @export
 * @interface AuthResponseDtoUserUser
 */
export interface AuthResponseDtoUserUser {
  /**
   *
   * @type {string}
   * @memberof AuthResponseDtoUserUser
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof AuthResponseDtoUserUser
   */
  email: string;
}
/**
 *
 * @export
 * @interface CreateTeamDto
 */
export interface CreateTeamDto {
  /**
   *
   * @type {string}
   * @memberof CreateTeamDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateTeamDto
   */
  description?: string;
  /**
   *
   * @type {Array<CreateTeamDtoPokemonInner>}
   * @memberof CreateTeamDto
   */
  pokemon?: Array<CreateTeamDtoPokemonInner>;
}
/**
 *
 * @export
 * @interface CreateTeamDtoPokemonInner
 */
export interface CreateTeamDtoPokemonInner {
  /**
   *
   * @type {number}
   * @memberof CreateTeamDtoPokemonInner
   */
  pokemon_id: number;
  /**
   *
   * @type {string}
   * @memberof CreateTeamDtoPokemonInner
   */
  pokemon_name: string;
  /**
   *
   * @type {string}
   * @memberof CreateTeamDtoPokemonInner
   */
  nickname?: string;
  /**
   *
   * @type {number}
   * @memberof CreateTeamDtoPokemonInner
   */
  position: number;
}
/**
 *
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
  /**
   *
   * @type {string}
   * @memberof LoginDto
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof LoginDto
   */
  password: string;
}
/**
 *
 * @export
 * @interface MessageResponseDto
 */
export interface MessageResponseDto {
  /**
   *
   * @type {string}
   * @memberof MessageResponseDto
   */
  message: string;
}
/**
 *
 * @export
 * @interface RegisterDto
 */
export interface RegisterDto {
  /**
   *
   * @type {string}
   * @memberof RegisterDto
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof RegisterDto
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof RegisterDto
   */
  firstName?: string;
  /**
   *
   * @type {string}
   * @memberof RegisterDto
   */
  lastName?: string;
}
/**
 *
 * @export
 * @interface TeamResponseDto
 */
export interface TeamResponseDto {
  /**
   *
   * @type {string}
   * @memberof TeamResponseDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof TeamResponseDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof TeamResponseDto
   */
  description: string | null;
  /**
   *
   * @type {string}
   * @memberof TeamResponseDto
   */
  user_id: string;
  /**
   *
   * @type {string}
   * @memberof TeamResponseDto
   */
  created_at: string | null;
  /**
   *
   * @type {string}
   * @memberof TeamResponseDto
   */
  updated_at: string | null;
  /**
   *
   * @type {Array<TeamResponseDtoTeamPokemonInner>}
   * @memberof TeamResponseDto
   */
  team_pokemon?: Array<TeamResponseDtoTeamPokemonInner>;
}
/**
 *
 * @export
 * @interface TeamResponseDtoTeamPokemonInner
 */
export interface TeamResponseDtoTeamPokemonInner {
  /**
   *
   * @type {string}
   * @memberof TeamResponseDtoTeamPokemonInner
   */
  id: string;
  /**
   *
   * @type {number}
   * @memberof TeamResponseDtoTeamPokemonInner
   */
  pokemon_id: number;
  /**
   *
   * @type {string}
   * @memberof TeamResponseDtoTeamPokemonInner
   */
  pokemon_name: string;
  /**
   *
   * @type {string}
   * @memberof TeamResponseDtoTeamPokemonInner
   */
  nickname: string | null;
  /**
   *
   * @type {number}
   * @memberof TeamResponseDtoTeamPokemonInner
   */
  position: number;
  /**
   *
   * @type {string}
   * @memberof TeamResponseDtoTeamPokemonInner
   */
  created_at: string | null;
}
/**
 *
 * @export
 * @interface TeamsListResponseDto
 */
export interface TeamsListResponseDto {
  /**
   *
   * @type {Array<TeamsListResponseDtoTeamsInner>}
   * @memberof TeamsListResponseDto
   */
  teams: Array<TeamsListResponseDtoTeamsInner>;
  /**
   *
   * @type {number}
   * @memberof TeamsListResponseDto
   */
  total: number;
  /**
   *
   * @type {number}
   * @memberof TeamsListResponseDto
   */
  limit: number;
  /**
   *
   * @type {number}
   * @memberof TeamsListResponseDto
   */
  offset: number;
}
/**
 *
 * @export
 * @interface TeamsListResponseDtoTeamsInner
 */
export interface TeamsListResponseDtoTeamsInner {
  /**
   *
   * @type {string}
   * @memberof TeamsListResponseDtoTeamsInner
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof TeamsListResponseDtoTeamsInner
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof TeamsListResponseDtoTeamsInner
   */
  description: string | null;
  /**
   *
   * @type {string}
   * @memberof TeamsListResponseDtoTeamsInner
   */
  user_id: string;
  /**
   *
   * @type {string}
   * @memberof TeamsListResponseDtoTeamsInner
   */
  created_at: string | null;
  /**
   *
   * @type {string}
   * @memberof TeamsListResponseDtoTeamsInner
   */
  updated_at: string | null;
  /**
   *
   * @type {Array<TeamResponseDtoTeamPokemonInner>}
   * @memberof TeamsListResponseDtoTeamsInner
   */
  team_pokemon?: Array<TeamResponseDtoTeamPokemonInner>;
}
/**
 *
 * @export
 * @interface UpdateTeamDto
 */
export interface UpdateTeamDto {
  /**
   *
   * @type {string}
   * @memberof UpdateTeamDto
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateTeamDto
   */
  description?: string;
  /**
   *
   * @type {Array<CreateTeamDtoPokemonInner>}
   * @memberof UpdateTeamDto
   */
  pokemon?: Array<CreateTeamDtoPokemonInner>;
}
/**
 *
 * @export
 * @interface UserResponseDto
 */
export interface UserResponseDto {
  /**
   *
   * @type {AuthResponseDtoUserUser}
   * @memberof UserResponseDto
   */
  user: AuthResponseDtoUserUser | null;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Get current authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUser: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/auth/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Login with email and password
     * @param {LoginDto} loginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: async (
      loginDto: LoginDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'loginDto' is not null or undefined
      assertParamExists("login", "loginDto", loginDto);
      const localVarPath = `/auth/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Logout and clear authentication session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/auth/logout`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Register a new user
     * @param {RegisterDto} registerDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register: async (
      registerDto: RegisterDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'registerDto' is not null or undefined
      assertParamExists("register", "registerDto", registerDto);
      const localVarPath = `/auth/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        registerDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AuthenticationApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get current authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCurrentUser(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserResponseDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCurrentUser(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.getCurrentUser"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Login with email and password
     * @param {LoginDto} loginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async login(
      loginDto: LoginDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<AuthResponseDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.login(
        loginDto,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.login"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Logout and clear authentication session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async logout(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<MessageResponseDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.logout"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Register a new user
     * @param {RegisterDto} registerDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async register(
      registerDto: RegisterDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<AuthResponseDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.register(
        registerDto,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthenticationApi.register"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthenticationApiFp(configuration);
  return {
    /**
     *
     * @summary Get current authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUser(options?: any): AxiosPromise<UserResponseDto> {
      return localVarFp
        .getCurrentUser(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Login with email and password
     * @param {LoginDto} loginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(loginDto: LoginDto, options?: any): AxiosPromise<AuthResponseDto> {
      return localVarFp
        .login(loginDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Logout and clear authentication session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(options?: any): AxiosPromise<MessageResponseDto> {
      return localVarFp
        .logout(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Register a new user
     * @param {RegisterDto} registerDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register(
      registerDto: RegisterDto,
      options?: any,
    ): AxiosPromise<AuthResponseDto> {
      return localVarFp
        .register(registerDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
  /**
   *
   * @summary Get current authenticated user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public getCurrentUser(options?: RawAxiosRequestConfig) {
    return AuthenticationApiFp(this.configuration)
      .getCurrentUser(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Login with email and password
   * @param {LoginDto} loginDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public login(loginDto: LoginDto, options?: RawAxiosRequestConfig) {
    return AuthenticationApiFp(this.configuration)
      .login(loginDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Logout and clear authentication session
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public logout(options?: RawAxiosRequestConfig) {
    return AuthenticationApiFp(this.configuration)
      .logout(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Register a new user
   * @param {RegisterDto} registerDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthenticationApi
   */
  public register(registerDto: RegisterDto, options?: RawAxiosRequestConfig) {
    return AuthenticationApiFp(this.configuration)
      .register(registerDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHello: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getHello(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getHello(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.getHello"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHello(options?: any): AxiosPromise<void> {
      return localVarFp
        .getHello(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getHello(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getHello(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Create a new Pokemon team
     * @param {CreateTeamDto} createTeamDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create: async (
      createTeamDto: CreateTeamDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createTeamDto' is not null or undefined
      assertParamExists("create", "createTeamDto", createTeamDto);
      const localVarPath = `/teams`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createTeamDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get user\'s Pokemon teams
     * @param {boolean} [includePokemons] Include team Pokemon in response (default: true)
     * @param {number} [offset] Pagination offset (default: 0)
     * @param {number} [limit] Number of teams to return (default: 20, max: 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAll: async (
      includePokemons?: boolean,
      offset?: number,
      limit?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/teams`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (includePokemons !== undefined) {
        localVarQueryParameter["includePokemons"] = includePokemons;
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a Pokemon team
     * @param {string} id Team ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    remove: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("remove", "id", id);
      const localVarPath = `/teams/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a Pokemon team
     * @param {string} id Team ID
     * @param {UpdateTeamDto} updateTeamDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update: async (
      id: string,
      updateTeamDto: UpdateTeamDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("update", "id", id);
      // verify required parameter 'updateTeamDto' is not null or undefined
      assertParamExists("update", "updateTeamDto", updateTeamDto);
      const localVarPath = `/teams/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateTeamDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TeamsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create a new Pokemon team
     * @param {CreateTeamDto} createTeamDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async create(
      createTeamDto: CreateTeamDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<TeamResponseDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.create(
        createTeamDto,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamsApi.create"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Get user\'s Pokemon teams
     * @param {boolean} [includePokemons] Include team Pokemon in response (default: true)
     * @param {number} [offset] Pagination offset (default: 0)
     * @param {number} [limit] Number of teams to return (default: 20, max: 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findAll(
      includePokemons?: boolean,
      offset?: number,
      limit?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<TeamsListResponseDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(
        includePokemons,
        offset,
        limit,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamsApi.findAll"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Delete a Pokemon team
     * @param {string} id Team ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async remove(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.remove(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamsApi.remove"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Update a Pokemon team
     * @param {string} id Team ID
     * @param {UpdateTeamDto} updateTeamDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async update(
      id: string,
      updateTeamDto: UpdateTeamDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<TeamResponseDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.update(
        id,
        updateTeamDto,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TeamsApi.update"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TeamsApiFp(configuration);
  return {
    /**
     *
     * @summary Create a new Pokemon team
     * @param {CreateTeamDto} createTeamDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(
      createTeamDto: CreateTeamDto,
      options?: any,
    ): AxiosPromise<TeamResponseDto> {
      return localVarFp
        .create(createTeamDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get user\'s Pokemon teams
     * @param {boolean} [includePokemons] Include team Pokemon in response (default: true)
     * @param {number} [offset] Pagination offset (default: 0)
     * @param {number} [limit] Number of teams to return (default: 20, max: 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAll(
      includePokemons?: boolean,
      offset?: number,
      limit?: number,
      options?: any,
    ): AxiosPromise<TeamsListResponseDto> {
      return localVarFp
        .findAll(includePokemons, offset, limit, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a Pokemon team
     * @param {string} id Team ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    remove(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .remove(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a Pokemon team
     * @param {string} id Team ID
     * @param {UpdateTeamDto} updateTeamDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    update(
      id: string,
      updateTeamDto: UpdateTeamDto,
      options?: any,
    ): AxiosPromise<TeamResponseDto> {
      return localVarFp
        .update(id, updateTeamDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI {
  /**
   *
   * @summary Create a new Pokemon team
   * @param {CreateTeamDto} createTeamDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public create(createTeamDto: CreateTeamDto, options?: RawAxiosRequestConfig) {
    return TeamsApiFp(this.configuration)
      .create(createTeamDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get user\'s Pokemon teams
   * @param {boolean} [includePokemons] Include team Pokemon in response (default: true)
   * @param {number} [offset] Pagination offset (default: 0)
   * @param {number} [limit] Number of teams to return (default: 20, max: 100)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public findAll(
    includePokemons?: boolean,
    offset?: number,
    limit?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamsApiFp(this.configuration)
      .findAll(includePokemons, offset, limit, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a Pokemon team
   * @param {string} id Team ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public remove(id: string, options?: RawAxiosRequestConfig) {
    return TeamsApiFp(this.configuration)
      .remove(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a Pokemon team
   * @param {string} id Team ID
   * @param {UpdateTeamDto} updateTeamDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamsApi
   */
  public update(
    id: string,
    updateTeamDto: UpdateTeamDto,
    options?: RawAxiosRequestConfig,
  ) {
    return TeamsApiFp(this.configuration)
      .update(id, updateTeamDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
